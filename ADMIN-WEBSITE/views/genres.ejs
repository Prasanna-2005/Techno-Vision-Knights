<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Manage Genre</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
          },
          colors: {
            dark: {
              100: '#B8B8D9',
              200: '#565694',
              300: '#393963',
              400: '#292952',
              500: '#1E1E40'
            },
            primary: {
              400: '#7C7CF6',
              500: '#6363E8',
              600: '#4D4DD5',
              700: '#3939C0'
            },
            secondary: {
              400: '#10B981',
              500: '#059669',
              600: '#047857',
              700: '#065F46'
            }
          }
        }
      }
    }
  </script>
</head>

<body class="bg-dark-400 min-h-screen font-sans text-gray-100">
  <!-- Navbar with subtle gradient -->
  <nav
    class="bg-gradient-to-r from-primary-700 to-primary-500 text-white p-4 md:p-5 flex justify-between items-center shadow-xl relative z-10">
    <a href="/dashboard" class="text-xl md:text-2xl font-bold flex items-center">
      <span class="text-2xl md:text-3xl mr-2"><svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2" fill="none"
          viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M7 4v16M17 4v16M3 8h4m10 0h4M3 12h18M3 16h4m10 0h4M4 20h16a1 1 0 001-1V5a1 1 0 00-1-1H4a1 1 0 00-1 1v14a1 1 0 001 1z" />
        </svg></span> Admin Dashboard
    </a>
    <a href="/logout"
      class="hover:underline text-sm md:text-base px-3 py-1 rounded-lg bg-black bg-opacity-20 hover:bg-opacity-30 transition">Logout</a>
  </nav>

  <!-- Background effect -->
  <div class="fixed inset-0 bg-dark-500 z-0 opacity-50">
    <div class="absolute w-96 h-96 bg-primary-600 rounded-full filter blur-3xl opacity-10 -top-20 -right-20"></div>
    <div class="absolute w-96 h-96 bg-secondary-600 rounded-full filter blur-3xl opacity-10 bottom-0 left-20"></div>
  </div>

  <!-- Main content -->
  <div class="flex items-center justify-center py-8 md:py-12 px-4 relative z-10">
    <div class="max-w-md md:max-w-xl w-full bg-dark-300 p-6 md:p-8 rounded-xl shadow-2xl border border-dark-200">
      <div class="flex items-center space-x-3 mb-6">
        <span class="text-3xl">ðŸŽ­</span>
        <h2 class="text-2xl md:text-3xl font-bold text-white">Manage Genre</h2>
      </div>

      <!-- Add Genre -->
      <div class="flex gap-2 mb-6">
        <input id="genreName" type="text" placeholder="Enter genre"
          class="w-full px-4 py-3 bg-dark-400 border border-dark-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:outline-none text-white placeholder-gray-400" />
        <button onclick="addGenre()"
          class="bg-secondary-500 text-white px-4 md:px-6 py-3 rounded-lg hover:bg-secondary-600 transition-all transform hover:scale-105 flex items-center">
          <span class="hidden md:inline mr-2">Add</span>
          <span>âž•</span>
        </button>
      </div>

      <!-- Genre List -->
      <div class="relative overflow-hidden">
        <!-- Title with counter -->
        <div class="flex justify-between items-center mb-3">
          <h3 class="font-semibold text-lg text-primary-400">Genre List</h3>
          <span id="genreCount" class="text-xs px-2 py-1 bg-dark-200 rounded-full">
            <% genres.length %>
          </span>
        </div>

        <!-- Stylized list -->
        <ul id="genreList" class="space-y-3 max-h-[60vh] overflow-y-auto pr-1 custom-scrollbar">
          <% genres.forEach(genre=> { %>
            <li
              class="flex justify-between p-3 md:p-4 bg-dark-400 rounded-lg border border-dark-200 hover:border-primary-500 transition-all group">
              <span class="text-gray-100 font-medium">
                <%= genre.name %>
              </span>
              <button onclick="deleteGenre(<%= genre.id %>)"
                class="bg-opacity-0 group-hover:bg-opacity-100 bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition-all"
                title="Delete genre">
                ðŸ‡½
              </button>
            </li>
            <% }); %>
        </ul>

        <!-- Empty state -->
        <div id="emptyState" class="hidden text-center py-8">
          <p class="text-gray-400">No genres found. Add your first genre!</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast notification -->
  <div id="toast"
    class="fixed bottom-4 right-4 bg-secondary-500 text-white px-4 py-2 rounded-lg shadow-lg transform translate-y-20 opacity-0 transition-all duration-300">
    Genre successfully added!
  </div>

  <script>
    // Show empty state if needed
    const genreList = document.getElementById("genreList");
    const emptyState = document.getElementById("emptyState");

    if (genreList.children.length === 0) {
      emptyState.classList.remove("hidden");
    }

    // Toast function
    function showToast(message, isError = false) {
      const toast = document.getElementById("toast");
      toast.textContent = message;
      toast.classList.remove("translate-y-20", "opacity-0");

      if (isError) {
        toast.classList.remove("bg-secondary-500");
        toast.classList.add("bg-red-500");
      } else {
        toast.classList.remove("bg-red-500");
        toast.classList.add("bg-secondary-500");
      }

      setTimeout(() => {
        toast.classList.add("translate-y-20", "opacity-0");
      }, 3000);
    }

    async function fetchGenres() {
      try {
        // Refresh the page to get updated genres list
        window.location.reload();
      } catch (error) {
        console.error("Error fetching genres:", error);
        showToast("Failed to refresh genres list", true);
      }
    }

    async function addGenre() {
      const name = document.getElementById("genreName").value.trim();
      if (!name) {
        showToast("Please enter a genre name", true);
        return;
      }

      try {
        const res = await fetch("/genres/add", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name }),
        });

        if (res.ok) {
          document.getElementById("genreName").value = "";
          showToast(`Genre "${name}" added successfully`);
          fetchGenres();
        } else {
          const error = await res.json();
          showToast(error.error || "Failed to add genre! It might already exist.", true);
        }
      } catch (error) {
        console.error("Error adding genre:", error);
        showToast("An error occurred while adding the genre", true);
      }
    }

    async function deleteGenre(id) {
      if (!confirm("Are you sure you want to delete this genre?")) return;

      try {
        const res = await fetch(`/genres/delete/${id}`, { method: "DELETE" });
        if (res.ok) {
          showToast("Genre deleted successfully");
          fetchGenres();
        } else {
          showToast("Failed to delete genre!", true);
        }
      } catch (error) {
        console.error("Error deleting genre:", error);
        showToast("An error occurred while deleting the genre", true);
      }
    }

    // Enter key to add genre
    document.getElementById("genreName").addEventListener("keyup", function (event) {
      if (event.key === "Enter") {
        addGenre();
      }
    });

    // Custom scrollbar styles
    document.head.insertAdjacentHTML("beforeend", `
      <style>
        .custom-scrollbar::-webkit-scrollbar {
          width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: #393963;
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: #565694;
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: #7C7CF6;
        }
        
        @media (max-width: 640px) {
          .custom-scrollbar::-webkit-scrollbar {
            width: 4px;
          }
        }
      </style>
    `);
  </script>
</body>

</html>